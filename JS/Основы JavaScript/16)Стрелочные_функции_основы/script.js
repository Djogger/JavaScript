/* Стрелочные функции, основы. */

// Синтаксис:

// let func = (arg1, arg2, ...argN) => expression;

// Более полная версия написания:

/*
let func = function(arg1, arg2, ...argN) {
	return expression;
};
*/


let sum = (a, b) => a + b;

/* Эта стрелочная функция представляет собой более короткую форму:

let sum = function(a, b) {
	return a + b;
};

*/

alert( sum(4, 5) ); // Ответ: 9.


// 1. Если у нас только один аргумент, то круглые скобки вокруг параметров можно опустить, сделав запись ещё короче:

let double = n => n * 2;

alert( double(9) );

// 2. Если аргументов нет, круглые скобки будут пустыми, но они должны присутствовать:

let empty = () => alert("Это же empty, что Вы ожидаете увидеть?? ,':/");

empty();

// Стрелочные функции можно использовать так же, как и Function Expression.
// Например, для динамического создания функции:

let age = prompt("Сколько тебе лет?", 19);

let welcome = (age < 18) ?
	() => alert("Иди спать") :
	() => alert("OOOO пойдём пить пиво оаоа :D");

welcome();


// Многострочные стрелочные функции:

let sum1 = (a, b) => {  // фигурная скобка открывает тело многострочной функции.
	let result = a + b;
	return result;  // если мы используем фигурные скобки, то нам нужно указать "return", чтобы вернуть из них значение.
};

alert( sum1(2, 2) ); // Ответ: 4.


/*Задание*/

ask = (question, yes, no) => {
	let answer = (confirm(question)) ?
		yes() :
		no();
	return answer;
};

ask(
	"Вы согласны?",
	function() { alert("Вы согласились на кредит в размере таком, что придется указывать, что число BigInt :O"); },
	function() { alert("Может всё же согласитесь? ,':)"); }
)

/*Выполнено*/